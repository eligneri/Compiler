import java.util.Arrays;

public class ParseTable {
    private int[][] table = new int[][]{
            {1,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,65,999},
            {999,999,-6,-16,25,999,999,999,-9,999,999,999,999,999,999,999,26,29,999,35,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999},
            {999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,-28,999,999,-33,37,-39,-41,999,999,999,-47,999,-51,999,999,-54,60,-62,999,999},
            {999,999,5,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999},
            {999,999,-6,15,999,999,999,999,-9,999,999,17,18,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999},
            {999,999,-6,15,999,999,999,999,-9,999,999,17,19,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999},
            {999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999},
            {999,999,999,999,999,999,999,10,999,12,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999},
            {999,999,999,999,999,999,999,10,999,13,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999},
            {999,999,999,999,999,999,999,11,999,999,14,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999},
            {999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999},
            {999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,26,30,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999},
            {999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,-39,999,999,999,999,-47,999,-51,999,999,-54,60,-62,999,999},
            {999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,32,37,-39,-41,999,999,999,-47,999,-51,999,999,-54,60,-62,999,999},
            {999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,26,31,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999},
            {999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,-39,999,999,999,999,-47,999,-51,999,999,-54,60,-62,999,999},
            {999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,45,999,999,999,999,42,999,48,999,52,999,999,58,999,999,999,999,999},
            {999,2,999,999,999,999,7,999,8,999,999,999,999,999,22,999,26,29,999,34,45,999,999,999,999,42,999,48,999,52,999,999,55,999,999,999,999,999},
            {999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,45,999,999,999,999,42,999,48,999,52,999,999,56,999,999,999,999,66},
            {999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,45,999,999,999,999,42,999,48,999,52,999,999,56,999,999,999,999,67},
            {999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,-39,999,999,999,999,46,999,-51,999,999,-54,60,-62,999,999},
            {999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,-39,999,999,999,999,999,999,999,999,999,53,60,-62,999,999},
            {999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,-39,999,999,999,999,999,999,50,999,999,-54,60,-62,999,999},
            {999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,36,-39,999,999,999,999,999,999,999,999,999,999,999,999,999,999},
            {999,999,999,999,999,3,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,-39,999,999,43,999,-47,999,-51,999,999,-54,60,-62,999,999},
            {999,999,999,999,999,999,999,999,999,999,999,999,999,-21,999,23,999,999,27,999,999,-33,37,-39,-41,999,999,999,-47,999,-51,999,999,-54,60,-62,999,999},
            {999,999,999,999,999,-4,999,999,999,999,999,999,999,-21,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999},
            {999,999,999,999,999,999,999,999,999,999,999,999,999,20,999,999,999,999,999,999,45,999,37,999,40,42,999,48,999,52,999,999,57,999,59,61,999,999},
            {999,999,999,999,999,-4,999,999,999,999,999,999,999,999,999,-24,999,999,999,999,999,999,999,-39,999,999,-44,999,-47,999,-51,999,999,-54,60,-62,999,999},
            {999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,36,38,999,999,999,999,999,999,999,999,999,999,60,999,999,999},
            {999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,-39,999,999,999,999,-47,999,-51,999,999,-54,60,-62,999,999},
            {999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,45,999,999,999,999,42,999,49,999,999,999,64,999,999,999,999,999,999},
            {999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,45,999,999,999,999,42,999,49,999,999,999,63,999,999,999,999,999,999},
            {999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999},
            {999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999}
    };

   public int getValue(String token, String stack){
       return table[getToken(token)][getStack(stack)];
   }

   private int getToken(String in){
       switch(in){
           case "PROGRAM":
               return 0;
           case "BEGIN":
               return 1;
           case "END":
               return 2;
           case "VAR":
               return 3;
           case "FUNCTION":
               return 4;
           case "PROCEDURE":
               return 5;
           case "RESULT":
               return 6;
           case "INTEGER":
               return 7;
           case "REAL":
                return 8;
           case "ARRAY":
               return 9;
           case "OF":
               return 10;
           case "IF":
               return 11;
           case "THEN":
               return 12;
           case "ELSE":
               return 13;
           case "WHILE":
               return 14;
           case "DO":
               return 15;
           case "NOT":
               return 16;
           case "IDENTIFIER":
               return 17;
           case "INTCONSTANT":
               return 18;
           case "REALCONSTANT":
               return 19;
           case "RELOP":
               return 20;
           case "MULOP":
               return 21;
           case "ADDOP":
               return 22;
           case "ASSIGNOP":
               return 23;
           case "COMMA":
               return 24;
           case "SEMICOLON":
               return 25;
           case "COLON":
               return 26;
           case "LPAREN":
               return 27;
           case "RPAREN":
               return 28;
           case "LBRACKET":
               return 29;
           case "RBRACKET":
               return 30;
           case "UNARYMINUS":
               return 31;
           case "UNARYPLUS":
               return 32;
           case "DOUBLEDOT":
               return 33;
           case "ENDMARKER":
               return 34;
           default:
               return 35;
       }
   }

   private int getStack(String in){
       String[] list = new String[]{
               "<program>","<identifier-list>","<declarations>","<sub-declarations>","<compound-statement>",
               "<identifier-list-tail>","<declaration-list>","<type>","<declaration-list-tail>","<standard-type>",
               "<array-type>","<subprogram-declaration>","<subprogram-head>","<arguments>","<parameter-list>",
               "<parameter-list-tail>","<statement-list>","<statement>","<statement-list-tail>","<elementary-statement>"
               ,"<expression>","<else-clause>","<es-tail>","<subscript>","<parameters>","<expression-list>",
               "<expression-list-tail>","<simple-expression>","<expression-tail>","<term>","<simple-expression-tail>",
               "<sign>","<factor>","<term-tail>","<factor-tail>","<actual-parameters>","<Goal>","<constant>"};

       return Arrays.asList(list).indexOf(in);

   }
}
